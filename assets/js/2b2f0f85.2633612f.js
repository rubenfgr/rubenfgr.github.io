"use strict";(self.webpackChunkrubenfgr_website=self.webpackChunkrubenfgr_website||[]).push([[3704],{1160:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=o(4848),r=o(8453);const i={sidebar_position:7},l="Procesos",a={id:"systems/linux/process",title:"Procesos",description:"Introducci\xf3n",source:"@site/docs/systems/linux/process.mdx",sourceDirName:"systems/linux",slug:"/systems/linux/process",permalink:"/docs/systems/linux/process",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Usuarios y permisos",permalink:"/docs/systems/linux/users_permissions"},next:{title:"Enlaces",permalink:"/docs/systems/linux/links"}},c={},d=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Visualizaci\xf3n est\xe1tica",id:"visualizaci\xf3n-est\xe1tica",level:2},{value:"Visualizaci\xf3n din\xe1mica",id:"visualizaci\xf3n-din\xe1mica",level:2},{value:"Interrumpir procesos",id:"interrumpir-procesos",level:2}];function t(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"procesos",children:"Procesos"}),"\n",(0,s.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,s.jsxs)(n.p,{children:["Un proceso es un programa en ejecuci\xf3n. Cada proceso tiene un identificador \xfanico llamado PID (Process IDentifier). Los procesos se crean mediante la llamada al sistema ",(0,s.jsx)(n.code,{children:"fork()"}),". El proceso que llama a ",(0,s.jsx)(n.code,{children:"fork()"})," se denomina proceso padre y el proceso creado se denomina proceso hijo. El proceso hijo es una copia exacta del proceso padre, pero con un PID diferente. El proceso hijo puede ejecutar un programa diferente al del proceso padre mediante la llamada al sistema ",(0,s.jsx)(n.code,{children:"exec()"}),". El proceso hijo puede terminar su ejecuci\xf3n mediante la llamada al sistema ",(0,s.jsx)(n.code,{children:"exit()"}),". El proceso padre puede esperar a que el proceso hijo termine su ejecuci\xf3n mediante la llamada al sistema ",(0,s.jsx)(n.code,{children:"wait()"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Nota"}),": En Linux, los procesos se organizan en un \xe1rbol de procesos. El proceso ra\xedz es el proceso init, que es el primer proceso que se ejecuta en el sistema. Todos los dem\xe1s procesos son descendientes de init."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Los procesos se encuentran en el directorio ",(0,s.jsx)(n.code,{children:"/proc"}),". Cada proceso tiene un directorio con su PID como nombre. En este directorio se encuentran varios archivos que contienen informaci\xf3n sobre el proceso, como el estado del proceso, el uso de la CPU, la memoria, los archivos abiertos, etc."]}),"\n",(0,s.jsxs)(n.p,{children:["Con el comando ",(0,s.jsx)(n.code,{children:"pidof"})," se puede obtener el PID de un proceso a partir de su nombre. Por ejemplo, para obtener el PID del proceso ",(0,s.jsx)(n.code,{children:"bash"})," se puede ejecutar el siguiente comando:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"# pidof\r\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"visualizaci\xf3n-est\xe1tica",children:"Visualizaci\xf3n est\xe1tica"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"PID: Identificador del proceso."}),"\n",(0,s.jsx)(n.li,{children:"PPID: Identificador del proceso padre."}),"\n",(0,s.jsx)(n.li,{children:"UID: Identificador del usuario que ha lanzado el proceso."}),"\n",(0,s.jsx)(n.li,{children:"STIME: Hora de inicio del proceso."}),"\n",(0,s.jsx)(n.li,{children:"%CPU: Porcentaje de uso de la CPU."}),"\n",(0,s.jsx)(n.li,{children:"%MEM: Porcentaje de uso de la memoria."}),"\n",(0,s.jsx)(n.li,{children:"VSZ: Tama\xf1o virtual del proceso."}),"\n",(0,s.jsx)(n.li,{children:"RSS: Tama\xf1o real del proceso."}),"\n",(0,s.jsx)(n.li,{children:"TTY: Terminal asociada al proceso."}),"\n",(0,s.jsxs)(n.li,{children:["STAT: Estado del proceso.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"R: Ejecuci\xf3n."}),"\n",(0,s.jsx)(n.li,{children:"S: Sue\xf1o."}),"\n",(0,s.jsx)(n.li,{children:"T: Parado."}),"\n",(0,s.jsx)(n.li,{children:"Z: Zombie."}),"\n",(0,s.jsx)(n.li,{children:"s: Proceso l\xedder de sesi\xf3n."}),"\n",(0,s.jsx)(n.li,{children:"+: Proceso en segundo plano."}),"\n",(0,s.jsx)(n.li,{children:"<: Proceso de alta prioridad."}),"\n",(0,s.jsx)(n.li,{children:"N: Proceso con baja prioridad."}),"\n",(0,s.jsx)(n.li,{children:"l: Proceso multihilo."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"TIME: Tiempo de CPU consumido por el proceso."}),"\n",(0,s.jsx)(n.li,{children:"CMD: Comando que se est\xe1 ejecutando."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Procesos asociados a la terminal actual\r\nps\r\n# Procesos de todos los usuarios\r\nps -e\r\n# Procesos de todos los usuarios con m\xe1s informaci\xf3n\r\nps -ef\r\n# Procesos de todos los usuarios con m\xe1s informaci\xf3n y \xe1rbol de procesos\r\nps -ef --forest\r\n# M\xe1s informaci\xf3n sobre los procesos\r\nps aux | less\n"})}),"\n",(0,s.jsx)(n.h2,{id:"visualizaci\xf3n-din\xe1mica",children:"Visualizaci\xf3n din\xe1mica"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"top: hora de inicio del proceso."}),"\n",(0,s.jsx)(n.li,{children:"up: tiempo que lleva el sistema en funcionamiento."}),"\n",(0,s.jsx)(n.li,{children:"load average: carga media del sistema en los \xfaltimos 1, 5 y 15 minutos."}),"\n",(0,s.jsx)(n.li,{children:"tasks: n\xfamero de tareas en ejecuci\xf3n, en espera y detenidas."}),"\n",(0,s.jsx)(n.li,{children:"%Cpu(s): porcentaje de uso de la CPU."}),"\n",(0,s.jsx)(n.li,{children:"Mem: memoria total, usada, libre, compartida, b\xfafer y cach\xe9."}),"\n",(0,s.jsx)(n.li,{children:"Swap: memoria de intercambio total, usada y libre."}),"\n",(0,s.jsx)(n.li,{children:"PID: identificador del proceso."}),"\n",(0,s.jsx)(n.li,{children:"USER: usuario que ha lanzado el proceso."}),"\n",(0,s.jsx)(n.li,{children:"PR: prioridad del proceso."}),"\n",(0,s.jsx)(n.li,{children:"NI: nivel de planificaci\xf3n del proceso."}),"\n",(0,s.jsx)(n.li,{children:"VIRT: tama\xf1o virtual del proceso."}),"\n",(0,s.jsx)(n.li,{children:"RES: tama\xf1o real del proceso."}),"\n",(0,s.jsx)(n.li,{children:"SHR: tama\xf1o compartido del proceso."}),"\n",(0,s.jsx)(n.li,{children:"S: estado del proceso."}),"\n",(0,s.jsx)(n.li,{children:"%CPU: porcentaje de uso de la CPU."}),"\n",(0,s.jsx)(n.li,{children:"%MEM: porcentaje de uso de la memoria."}),"\n",(0,s.jsx)(n.li,{children:"TIME+: tiempo de CPU consumido por el proceso."}),"\n",(0,s.jsx)(n.li,{children:"COMMAND: comando que se est\xe1 ejecutando."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Actualizar la informaci\xf3n cada 1 segundo\r\ntop\r\n# Top abierto. Tiempo de actualizaci\xf3n\r\ns\r\n# Top abierto. Cambiar unidad de consumo\r\ne\r\n# Top abierto. Filtrar por usuario\r\nu\r\n# Top abierto. Filtro personalizado\r\no # Por ejemplo, %CPU > 2\n"})}),"\n",(0,s.jsx)(n.h2,{id:"interrumpir-procesos",children:"Interrumpir procesos"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ctrl + C: enviar la se\xf1al SIGINT al proceso. El proceso se detiene y se env\xeda al segundo plano."}),"\n",(0,s.jsx)(n.li,{children:"Ctrl + Z: enviar la se\xf1al SIGTSTP al proceso. El proceso se detiene y se env\xeda al segundo plano."}),"\n",(0,s.jsx)(n.li,{children:"kill: enviar una se\xf1al a un proceso. Por defecto, env\xeda la se\xf1al SIGTERM."}),"\n",(0,s.jsx)(n.li,{children:"killall: enviar una se\xf1al a todos los procesos que coincidan con un nombre. Por defecto, env\xeda la se\xf1al SIGTERM."}),"\n",(0,s.jsx)(n.li,{children:"pkill: enviar una se\xf1al a todos los procesos que coincidan con un patr\xf3n. Por defecto, env\xeda la se\xf1al SIGTERM."}),"\n",(0,s.jsx)(n.li,{children:"xkill: matar un proceso con el rat\xf3n. Seleccionar la ventana del proceso y hacer clic en ella."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Reaunudar un proceso detenido\r\nbg %1\r\n# Enviar la se\xf1al SIGINT al proceso\r\nkill -2 PID\r\n# Enviar la se\xf1al SIGKILL al proceso\r\nkill -9 PID\r\n# Enviar la se\xf1al SIGTERM al proceso\r\nkill -15 PID\r\n# Enviar la se\xf1al SIGSTOP al proceso\r\nkill -19 PID\r\n# Enviar la se\xf1al SIGCONT al proceso\r\nkill -18 PID\r\n# Enviar la se\xf1al SIGTSTP al proceso\r\nkill -20 PID # Ctrl + Z\r\nkill -TSTP PID\n"})}),"\n",(0,s.jsx)(n.h1,{id:"segundo-plano",children:"Segundo plano"}),"\n",(0,s.jsxs)(n.p,{children:["Un proceso en segundo plano es un proceso que se ejecuta en segundo plano sin bloquear la terminal. Para ejecutar un proceso en segundo plano, se a\xf1ade el car\xe1cter ",(0,s.jsx)(n.code,{children:"&"})," al final del comando. Para enviar un proceso en primer plano a segundo plano, se ejecuta el comando ",(0,s.jsx)(n.code,{children:"bg"}),". Para enviar un proceso en segundo plano a primer plano, se ejecuta el comando ",(0,s.jsx)(n.code,{children:"fg"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Ejecutar un proceso en segundo plano\r\nsleep 10 &\r\n# Enviar un proceso en primer plano a segundo plano\r\nbg %1\r\n# Ver los procesos en segundo plano\r\njobs\r\n# Enviar un proceso en segundo plano a primer plano\r\nfg %1\n"})}),"\n",(0,s.jsx)(n.h1,{id:"se\xf1ales-signals",children:"Se\xf1ales (Signals)"}),"\n",(0,s.jsxs)(n.p,{children:["Las se\xf1ales son mensajes que se env\xedan a un proceso para notificarle un evento. Las se\xf1ales se pueden enviar a un proceso mediante el comando ",(0,s.jsx)(n.code,{children:"kill"}),". Algunas se\xf1ales comunes son:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SIGINT: se\xf1al de interrupci\xf3n. Se env\xeda al pulsar Ctrl + C."}),"\n",(0,s.jsx)(n.li,{children:"SIGTSTP: se\xf1al de parada. Se env\xeda al pulsar Ctrl + Z."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>a});var s=o(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);